<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2016/11 on Rancher JP</title>
    <link>http://www.rancher.jp/archives/2016/11/index.xml</link>
    <description>Recent content in 2016/11 on Rancher JP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>© 2016 Rancher JP</copyright>
    <atom:link href="http://www.rancher.jp/archives/2016/11/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>クイックスタートガイド</title>
      <link>http://www.rancher.jp/docs/qsg/</link>
      <pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.rancher.jp/docs/qsg/</guid>
      <description>

&lt;h2 id=&#34;クイック-スタート-ガイド&#34;&gt;クイック スタート ガイド&lt;/h2&gt;

&lt;p&gt;このガイドでは、1台のLinuxサーバーに全てインストールして動く、最も簡単なRancherをインストールしてみます。&lt;/p&gt;

&lt;h3 id=&#34;linuxホストを準備する&#34;&gt;Linuxホストを準備する&lt;/h3&gt;

&lt;p&gt;3.10 + のカーネルが最低限入っている64 ビット Ubuntu 16.04 と Linux ホストを準備します。 ノートパソコンでも、仮想環境でも、物理サーバーも利用可能です。 Linux ホストには少なくとも &lt;strong&gt;1GB&lt;/strong&gt; のメモリがあることを確認してください。 &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; をホストにインストールします。&lt;/p&gt;

&lt;p&gt;サーバーにDockerをインストールするには、 &lt;a href=&#34;https://docs.docker.com/engine/installation/linux/ubuntulinux/&#34;&gt;Docker&lt;/a&gt; 社の手引きを参照してください。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; 現在、Windows と Mac のDockerはサポートされていません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;rancher-サーバータグ&#34;&gt;Rancher サーバータグ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rancher/server:latest&lt;/code&gt; タグはRancherの安定版ビルドにつけられます。Rancher社が推奨している本番環境展開用です。 各マイナーリリースタグに対して、それぞれのバージョンでのドキュメントを提供します。&lt;/p&gt;

&lt;p&gt;もし、CI自動化フレームワークで検証済の最新開発版のビルドに興味があれば、最新の開発版のリリースタグが付いた&lt;a href=&#34;https://github.com/rancher/rancher/releases&#34;&gt;リリースページ&lt;/a&gt; を確認してください。 このリリースは本番環境デプロイ用ではありません。 開発ビルドには、全て開発リリースであることを示す&lt;code&gt;*-pre{n}&lt;/code&gt; という接尾辞が付加されます。 &lt;code&gt;rc{n}&lt;/code&gt; サフィックスの付いているリリースはいずれも使用しないでください。 &lt;code&gt;rc&lt;/code&gt; ビルドは、Rancherチームが開発版ビルドをテストするためのものです。&lt;/p&gt;

&lt;h3 id=&#34;rancherサーバーを動かす&#34;&gt;Rancherサーバーを動かす&lt;/h3&gt;

&lt;p&gt;Rancherサーバーを起動するコマンドは1つだけです。コンテナを起動したら、コンテナのログを調べて、サーバが起動して動いているかを確認します。&lt;/p&gt;
$ sudo docker run -d --restart=unless-stopped -p 8080:8080 rancher/server
# Rancherのログを表示
$ sudo docker logs -f &lt;CONTAINER_ID&gt;

&lt;p&gt;Rancherサーバーの起動に数分おまちください。 &lt;code&gt;.... Startup Succeeded, Listening on port....&lt;/code&gt; が表示されたら、RancherのUIは起動して稼働中です。 ログのこの行が表示されたら、ほとんど設定は終了です。 この出力の後に追加のログが出力される可能性があるので、これが初期起動時のログの最後の行であるとは限りません。&lt;/p&gt;

&lt;p&gt;UIは &lt;code&gt;8080&lt;/code&gt; ポートで動いているので、表示するには &lt;code&gt;http://&amp;lt;SERVER_IP&amp;gt;:8080&lt;/code&gt; をブラウザーで開いてください。 Rancherサーバーとブラウザーが同じホストで動いている場合は、&lt;code&gt;http://192.168.1.100:8080&lt;/code&gt; のように実IPを使ってください。&lt;code&gt;http://localhost:8080&lt;/code&gt; や &lt;code&gt;http://127.0.0.1:8080&lt;/code&gt; としないようにしてください。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; Rancherサーバーにはアクセス制限が設定されておらず、このIPアドレスにアクセスできる誰でもこのUIとAPIを利用できます。 &lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/configuration/access-control/&#34;&gt;アクセス制限&lt;/a&gt;を設定することをお勧めします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;ホストを追加&#34;&gt;ホストを追加&lt;/h3&gt;

&lt;p&gt;わかりやすくするためにRancherサーバーを実行しているサーバーをRancherのホストとして追加します。実際の運用では、専用のRancherを実行するホストを動かすことをお勧めします。&lt;/p&gt;

&lt;p&gt;ホストを追加するには、UIから &lt;strong&gt;Infrastructure&lt;/strong&gt; をクリックして、&lt;strong&gt;Hosts&lt;/strong&gt; ページを表示してください。 &lt;strong&gt;Add Host&lt;/strong&gt; をクリックします。 Rancherで利用するURLを選択するように指示されます。 このURLは、Rancherサーバーが動いているURLになり、これから追加するRancherホストから接続可能なものでなくてはなりません。 この設定は、RancherサーバーがファイヤウォールでNATされたり、ロードバランサーを介してインターネットに公開される場合に便利です。 ホストに&lt;code&gt;192.168.*.*&lt;/code&gt;のようなプライベートやローカルIPなアドレスがついていた場合、Rancherサーバーにホストが本当にURLにアクセスできるかどうかを尋ねる警告が表示されます。&lt;/p&gt;

&lt;p&gt;今のところ、これらの警告は無視してRancherサーバーホスト自体を追加することができます。 &lt;strong&gt;Save&lt;/strong&gt; をクリックします。 デフォルトでは、Rackherエージェントコンテナを起動するDockerコマンドを提供する &lt;strong&gt;Custom&lt;/strong&gt; オプションが選択されます。 RancherがDocker Machineを使用してホストを起動するクラウドプロバイダ向けのオプションもあります。&lt;/p&gt;

&lt;p&gt;UIでホスト上でオープンにするポートの指示とオプションの設定項目が表示されます。Rancherサーバーも稼動しているホストを追加するので、このホストで使用するパブリックIPを追加する必要があります。 このオプションで入力されたIPにより、カスタムコマンドでの環境変数が自動的に変更されます。&lt;/p&gt;

&lt;p&gt;Rancherサーバーを実行しているホストでこのコマンドを実行します。&lt;/p&gt;

&lt;p&gt;Rancher UIで &lt;strong&gt;Close&lt;/strong&gt; をクリックすると、&lt;strong&gt;Infrastructure&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Hosts&lt;/strong&gt; 表示に戻ります。 数分後にホストが自動的に表示されます。&lt;/p&gt;

&lt;h3 id=&#34;インフラストラクチャーサービス&#34;&gt;インフラストラクチャーサービス&lt;/h3&gt;

&lt;p&gt;最初にRancherにログインすると自動的に &lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/environments/&#34;&gt;environment&lt;/a&gt;になります。この&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/rancher-services/&#34;&gt;infrastructure services&lt;/a&gt;を開始するためにデフォルトのcattle &lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/environments/#what-is-an-environment-template&#34;&gt;environment template&lt;/a&gt;が選択されます。この[infrastructure services]は、Rancherの持っている&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/rancher-services/dns-service/&#34;&gt;dns&lt;/a&gt;や&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/rancher-services/metadata-service&#34;&gt;metadata&lt;/a&gt;、&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/rancher-services/networking&#34;&gt;networking&lt;/a&gt;そして&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/cattle/health-checks/&#34;&gt;health checks&lt;/a&gt;のような機能の利点を活用するため有利なものです。これらのインフラストラクチャスタックは、&lt;strong&gt;Stacks&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Infrastructure&lt;/strong&gt; にあります。これらのスタックは、ホストがRancherに完全に追加されるまで、&lt;code&gt;不健全な&lt;/code&gt; 状態です。ホストを追加した後は、サービスを追加する前にすべてのインフラストラクチャスタックが &lt;code&gt;active&lt;/code&gt; になるまで待つことをお勧めします。&lt;/p&gt;

&lt;p&gt;ホストでは、&lt;strong&gt;Show System&lt;/strong&gt; チェックボックスをクリックしない限り、インフラストラクチャサービスのコンテナは非表示になります。&lt;/p&gt;

&lt;h3 id=&#34;uiを使用してコンテナを作成する&#34;&gt;UIを使用してコンテナを作成する&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Stacks&lt;/strong&gt; 画面に移動して、まだサービスがない場合は、Welcome画面の &lt;strong&gt;Define a service&lt;/strong&gt; ボタンをクリックします。 Rancherに既にサービスが存在する場合は、既存のスタックの &lt;strong&gt;Add Service&lt;/strong&gt; をクリックするか、新しいスタックを作成してサービスを追加できます。 新しいスタックを作成する必要がある場合は、 &lt;strong&gt;Add Stack&lt;/strong&gt; をクリックし、名前と説明を入力して &lt;strong&gt;Create&lt;/strong&gt; をクリックします。 次に新規スタックで &lt;strong&gt;Add Service&lt;/strong&gt; をクリックします。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;first-container&amp;rdquo;のような名前でサービスを追加します。 デフォルトの設定を使用して &lt;strong&gt;Create&lt;/strong&gt; をクリックするだけです。 Rancherは、ホスト上でコンテナの起動を開始します。ホストのIPアドレスにかかわらず、Rancherがipsecインフラストラクチャサービスで管理オーバーレイネットワークを作成したため、最初のコンテナのIPアドレスは &lt;code&gt;10.42 *.*&lt;/code&gt; の範囲になります。管理オーバーレイネットワークで、コンテナが異なるホスト間で相互に通信できるように管理しています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;first-container&lt;/em&gt;&lt;/strong&gt; のドロップダウンをクリックすると、コンテナの停止、ログの表示、コンテナコンソールへのアクセスなどの管理アクションを実行できます。&lt;/p&gt;

&lt;h3 id=&#34;dockerのcliを直接使ってコンテナを作成する&#34;&gt;DockerのCLIを直接使ってコンテナを作成する&lt;/h3&gt;

&lt;p&gt;Rancherは、コンテナがUIの外で作成されていてもホスト上のコンテナを表示できます。ホストのシェル端末からコンテナを作成してみます。&lt;/p&gt;
$ docker run -d -it --name=second-container ubuntu:14.04.2

&lt;p&gt;UI上では、 &lt;strong&gt;&lt;em&gt;second-container&lt;/em&gt;&lt;/strong&gt; がホスト上にポップアップ表示されます。&lt;/p&gt;

&lt;p&gt;RancherはDockerデーモンで発生するイベントに反応し、実際の動作状況とRancherでの状況を調整します。 &lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/native-docker/&#34;&gt;native docker CLI&lt;/a&gt;を使用してRancherを利用する方法の詳細を読むことができます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;second-container&lt;/em&gt;&lt;/strong&gt; のIPアドレスを見ると、&lt;code&gt;10.42.*.*&lt;/code&gt; の範囲には&lt;strong&gt;ない&lt;/strong&gt;ことがわかります。 これは、Dockerデーモンによって割り当てられた通常のIPアドレスです。 CLIを使用してDockerコンテナを作成するとこのようになります。&lt;/p&gt;

&lt;p&gt;CLIを使用してRancherのオバーレイネットワークからIPアドレスのDockerコンテナを作成するにはどうすればよいでしょうか？ しなければならないこと、コマンドにラベル(i.e. &lt;code&gt;io.rancher.container.network=true&lt;/code&gt;)を追加するだけで、Rancherは、このコンテナが&lt;code&gt;管理&lt;/code&gt;ネットワークに属しなければならないと認識します。&lt;/p&gt;
$ docker run -d -it --label io.rancher.container.network=true ubuntu:14.04.2

&lt;h3 id=&#34;マルチコンテナアプリケーションの作成&#34;&gt;マルチコンテナアプリケーションの作成&lt;/h3&gt;

&lt;p&gt;個別のコンテナを作成する方法と、ホスト間ネットワークでそれらがどのように接続されるかを説明しました。 しかし、実際のアプリケーションのほとんどは複数のサービスで構成されており、各サービスは複数のコンテナで構成されています。 たとえば、&lt;a href=&#34;http://sdelements.github.io/lets-chat/&#34;&gt;LetsChat&lt;/a&gt;アプリケーションは、次のようなサービスで構成されます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ロードバランサー ロードバランサーはインターネットからのリクエストを&amp;rdquo; LetsChat&amp;rdquo; アプリケーションに中継します。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ウェブ&lt;/em&gt; サービス &amp;ldquo;LetsChat&amp;rdquo; コンテナ2つで構成されます。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;データーベース&lt;/em&gt; サービス &amp;ldquo;Mongo&amp;rdquo; コンテナ1つで構成されます。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ロードバランサーは&lt;em&gt;ウェブ&lt;/em&gt; サービス(例 LetsChat) に接続し、&lt;em&gt;ウェブ&lt;/em&gt; サービスは&lt;em&gt;データーベース&lt;/em&gt; サービス(例 Mongo)にリンクします。&lt;/p&gt;

&lt;p&gt;このセクションでは、Rancherに &lt;a href=&#34;http://sdelements.github.io/lets-chat/&#34;&gt;LetsChat&lt;/a&gt; アプリケーションのコンテナを作成して展開する方法を説明します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stacks&lt;/strong&gt; 画面に移動します。まだサービスがない場合は、Welcome画面の &lt;strong&gt;Define a Service&lt;/strong&gt; ボタンをクリックします。 Rancherに既にサービスが存在する場合は、既存のスタックの &lt;strong&gt;Add Service&lt;/strong&gt; をクリックするか、新しいスタックを作成してサービスを追加できます。 新しいスタックを作成する必要がある場合は、 &lt;strong&gt;Add Stack&lt;/strong&gt; をクリックし、名前と説明を入力して &lt;strong&gt;Create&lt;/strong&gt; をクリックします。 次に新規スタックで &lt;strong&gt;Add Service&lt;/strong&gt; をクリックします。&lt;/p&gt;

&lt;p&gt;まず、&lt;code&gt;mongo&lt;/code&gt; イメージを使い &lt;em&gt;データベース&lt;/em&gt; というサービスを作成します。 &lt;strong&gt;Create&lt;/strong&gt; をクリックします。&lt;em&gt;データーベース&lt;/em&gt; サービスが含まれるスタックページがすぐに表示されます。&lt;/p&gt;

&lt;p&gt;次に、もう一度 &lt;strong&gt;Add Service&lt;/strong&gt; をクリックして、別のサービスを追加します。 LetsChatサービスと&lt;em&gt;データーベース&lt;/em&gt; サービスとをリンクをさせます。 &lt;code&gt;sdelements/lets-chat&lt;/code&gt;イメージを使用して、&lt;code&gt;web&lt;/code&gt; 名前を付けます。UI上でスライダを動かして、サービスのスケールをコンテナ2つにします。 &lt;strong&gt;Service Links&lt;/strong&gt; に&lt;code&gt;mongo&lt;/code&gt; という名前の &lt;em&gt;データベース&lt;/em&gt; サービスを追加します。 Dockerの場合と同様に、Rancherは、&lt;code&gt;mongo&lt;/code&gt; の名前を選択すると、リンクされたデータベースとして &lt;code&gt;letschat&lt;/code&gt; イメージに必要な環境変数をリンクします。 &lt;strong&gt;Create&lt;/strong&gt; をクリックします。&lt;/p&gt;

&lt;p&gt;最後にロードバランサーを作成します。 &lt;strong&gt;Add Service&lt;/strong&gt; ボタンの横にあるドロップダウンメニューアイコンをクリックします。 &lt;strong&gt;Add Load Balancer&lt;/strong&gt; を選択します。 &lt;code&gt;letschatapplb&lt;/code&gt; のような名前を入力し、接続先アプリケーションにアクセスするために使用するホスト上のソースポート(例 &lt;code&gt;80&lt;/code&gt;)とターゲットサービス(例 &lt;em&gt;web&lt;/em&gt;)とターゲットポート(例 &lt;code&gt;8080&lt;/code&gt;) を選択します。 この場合、&lt;em&gt;ウェブ&lt;/em&gt; サービスで &lt;code&gt;8080&lt;/code&gt;番ポートを使用します。&lt;/p&gt;

&lt;p&gt;LetsChatアプリケーションが完成しました！ &lt;strong&gt;Stacks&lt;/strong&gt;画面で、ロードバランサが公開しているポートをリンクとして見つけることができます。 そのリンクをクリックすると、新しいブラウザが開き、LetsChatアプリケーションが表示されます。&lt;/p&gt;

&lt;h3 id=&#34;rancher-cli-を使用して複数コンテナアプリケーションを作成する&#34;&gt;Rancher CLI を使用して複数コンテナアプリケーションを作成する&lt;/h3&gt;

&lt;p&gt;このセクションでは、&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/cli/&#34;&gt;Rancher CLI&lt;/a&gt; というコマンドラインツールを使用して前のセクションで作成したと同じ&lt;a href=&#34;http://sdelements.github.io/lets-chat/&#34;&gt;LetsChat&lt;/a&gt;アプリケーションを作成して展開する方法を説明します。&lt;/p&gt;

&lt;p&gt;Rancherサービスが起動したときに、Rancher CLIツールは一般的なDocker Composeツールと同じように機能します。 これは、同じように &lt;code&gt;docker-compose.yml&lt;/code&gt; ファイルを読み込んでRancherにアプリケーションをデプロイします。 &lt;code&gt;rancher-compose.yml&lt;/code&gt; ファイルを利用すると &lt;code&gt;docker-compose.yml&lt;/code&gt; ファイルを拡張して上書きする追加の属性を指定することができます。&lt;/p&gt;

&lt;p&gt;前のセクションでは、ロードバランサを備えたLetsChatアプリケーションを作成しました。 Rancherで作成していた場合、スタックのドロップダウンメニューから &lt;strong&gt;Export Config&lt;/strong&gt; を選択して、UIから直接ファイルをダウンロードできます。 &lt;code&gt;docker-compose.yml&lt;/code&gt; と &lt;code&gt;rancher-compose.yml&lt;/code&gt; ファイルは次のようになります。&lt;/p&gt;

&lt;h4 id=&#34;example-docker-compose-yml&#34;&gt;Example docker-compose.yml&lt;/h4&gt;
version: &#39;2&#39;
services:
  letschatapplb:
    #If you only have 1 host and also created the host in the UI,
    # you may have to change the port exposed on the host.
    ports:
    - 80:80/tcp
    labels:
      io.rancher.container.create_agent: &#39;true&#39;
      io.rancher.container.agent.role: environmentAdmin
    image: rancher/lb-service-haproxy:v0.4.2
  web:
    labels:
      io.rancher.container.pull_image: always
    tty: true
    image: sdelements/lets-chat
    links:
    - database:mongo
    stdin_open: true
  database:
    labels:
      io.rancher.container.pull_image: always
    tty: true
    image: mongo
    stdin_open: true

&lt;h4 id=&#34;example-rancher-compose-yml&#34;&gt;Example rancher-compose.yml&lt;/h4&gt;
vversion: &#39;2&#39;
services:
  letschatapplb:
    scale: 1
    lb_config:
      certs: []
      port_rules:
      - hostname: &#39;&#39;
        path: &#39;&#39;
        priority: 1
        protocol: http
        service: quickstartguide/web
        source_port: 80
        target_port: 8080
    health_check:
      port: 42
      interval: 2000
      unhealthy_threshold: 3
      healthy_threshold: 2
      response_timeout: 2000
  web:
    scale: 2
  database:
    scale: 1

&lt;p&gt;&lt;br&gt;
フッター右側にある &lt;strong&gt;Download CLI&lt;/strong&gt; をクリックして、RancherのUIからRancher CLIバイナリをダウンロードします。 Windows、Mac、Linux用のバイナリを提供しています。&lt;/p&gt;

&lt;p&gt;Rancher CLIを使用してRancherでサービスを開始するには、いくつか環境変数を設定する必要があります。 Rancher UIで&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/api/api-keys/&#34;&gt;account API Key&lt;/a&gt;を作成します。 &lt;strong&gt;API&lt;/strong&gt; をクリックし、&lt;strong&gt;Add Account API Key&lt;/strong&gt; をクリックします。 ユーザー名 (アクセスキー) とパスワード (秘密キー) を保存します。 Rancher CLIに必要な次の環境変数を設定します: &lt;code&gt;RANCHER_URL&lt;/code&gt;、&lt;code&gt;RANCHER_ACCESS_KEY&lt;/code&gt; と &lt;code&gt;RANCHER_SECRET_KEY&lt;/code&gt;&lt;/p&gt;
# Set the url that Rancher is on
$ export RANCHER_URL=http://server_ip:8080/
# Set the access key, i.e. username
$ export RANCHER_ACCESS_KEY=&lt;username_of_key&gt;
# Set the secret key, i.e. password
$ export RANCHER_SECRET_KEY=&lt;password_of_key&gt;

&lt;p&gt;&lt;br&gt;
&lt;code&gt;docker-compose.yml&lt;/code&gt; と &lt;code&gt;rancher-compose.yml&lt;/code&gt; を保存したディレクトリに移動し、コマンドを実行します。&lt;/p&gt;
$ rancher -p NewLetsChatApp up -d

&lt;p&gt;Rancherで &lt;strong&gt;NewLetsChatApp&lt;/strong&gt; という新しいスタックが作成され、サービスがすべて起動します&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>