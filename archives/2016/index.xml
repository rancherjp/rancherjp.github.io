<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rancher JP</title>
    <link>https://rancherjp.github.io/archives/2016/index.xml</link>
    <description>Recent content on Rancher JP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>© 2016 Rancher JP</copyright>
    <atom:link href="https://rancherjp.github.io/archives/2016/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>リリース v1.2.0</title>
      <link>https://rancherjp.github.io/release-announce/v.1.2.0/</link>
      <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://rancherjp.github.io/release-announce/v.1.2.0/</guid>
      <description>

&lt;h2 id=&#34;バージョン&#34;&gt;バージョン&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;rancher/server:v1.2.0&lt;/li&gt;
&lt;li&gt;rancher/agent:v1.1.0&lt;/li&gt;
&lt;li&gt;rancher/lb-service-haproxy:v0.4.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rancher/rancher-compose/releases/tag/v0.12.0&#34;&gt;rancher-compose-v0.12.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rancher/cli/releases/tag/v0.4.0&#34;&gt;rancher-v0.4.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;注意:&lt;/em&gt; 新しい&lt;a href=&#34;http://docs.rancher.com/rancher/v1.2/en/rancher-services/&#34;&gt;infrastructure services&lt;/a&gt;では、ロードバランサの機能を指定のHAProxyイメージに変更し、ネットワークエージェントが起動されなくなりました。 したがって、rancher/agent-instanceが必要なくなりました。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;新機能-v1-1-4からの変更点&#34;&gt;新機能 (v1.1.4からの変更点)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes 1.4.6 に対応&lt;/strong&gt; - 最新のk8sに対応することに加えて、Rancherは以下の機能が提供されます:

&lt;ul&gt;
&lt;li&gt;既定のRancherオプションに加えて、ユーザーがAWSをKubernetesのクラウドプロバイダーとして選択できるようになりました。&lt;/li&gt;
&lt;li&gt;kubectl exec、logs、attachがサポートされました。&lt;/li&gt;
&lt;li&gt;k8sノード にラベル付けがサポートされました。&lt;/li&gt;
&lt;li&gt;PetSetオブジェクトを使用してステートフルアプリケーションの管理がサポートされました。&lt;/li&gt;
&lt;li&gt;環境内でのk8sクラスタアップグレードがサポートされました。&lt;/li&gt;
&lt;li&gt;Rancher UIで、k8sテンプレートを個々のアプリケーションとして管理するスタックをサポートしました。 スタックは、アプリケーションとしてアップグレード、削除することができます。&lt;/li&gt;
&lt;li&gt;Rancher UIでk8sの展開とレプリカセットをサポーターしました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker 1.12.x サポート [&lt;a href=&#34;https://github.com/rancher/rancher/issues/5179&#34;&gt;#5179&lt;/a&gt;]&lt;/strong&gt; - Docker 1.12.xがRancherでサポートされ、いくつかの機能が強化されました。

&lt;ul&gt;
&lt;li&gt;Docker Swarmモードは、環境作成時にオーケストレーションフレームワークのオプションとして利用できるようになりました。&lt;/li&gt;
&lt;li&gt;CattleはDocker 1.12.3以降のすべてのdocker runオプションをサポートするようになりました。更新された実行オプションの詳細については、&lt;a href=&#34;https://github.com/rancher/rancher/issues/4708&#34;&gt;#4708&lt;/a&gt;を参照してください。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改善 &lt;a href=&#34;http://docs.rancher.com/rancher/v1.2/en/rancher-services/networking&#34;&gt;Network&lt;/a&gt; サポート [&lt;a href=&#34;https://github.com/rancher/rancher/issues/5256&#34;&gt;#5256&lt;/a&gt;, &lt;a href=&#34;https://github.com/rancher/rancher/issues/5276&#34;&gt;#5276&lt;/a&gt;]&lt;/strong&gt; - Container Network Interface(CNI)仕様用に作成されたカスタムネットワークプラグインのライフサイクル、配布、および更新管理を管理する機能が追加されました。

&lt;ul&gt;
&lt;li&gt;現在のRancher IPSec管理ネットワークオプションがCNIプラグインとして完全に書き直されて、Cattleとk8sオーケストレーションフレームワークの両方で利用できます。&lt;/li&gt;
&lt;li&gt;Rancherは、暗号化されていない(その為に性能の良い)クロスホスト用の管理ネットワークの代替オプションとして、VXLAN CNIプラグインが提供されるようになりました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改善 &lt;a href=&#34;http://docs.rancher.com/rancher/v1.2/en/cattle/adding-load-balancers/&#34;&gt;Load Balancer v2&lt;/a&gt; のサポート [&lt;a href=&#34;https://github.com/rancher/rancher/issues/2179&#34;&gt;#2179&lt;/a&gt;]&lt;/strong&gt; - RancherのLBサービスは、以下のサポートを受けて完全に書き直されました。

&lt;ul&gt;
&lt;li&gt;SNIルーティングがLB v2で利用可能になりました。&lt;/li&gt;
&lt;li&gt;HAProxyロギングがLB v2で利用可能になりました。[&lt;a href=&#34;https://github.com/rancher/rancher/issues/2414&#34;&gt;#2414&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;既にサポートされているグローバルセクションとデフォルトセクションに加えて、フロントエンドとバックエンドのカスタム構成をHAProxy構成に追加できるようになりました。[&lt;a href=&#34;https://github.com/rancher/rancher/issues/2171&#34;&gt;#2171&lt;/a&gt;, &lt;a href=&#34;https://github.com/rancher/rancher/issues/1871&#34;&gt;#1871&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;ユーザはホスト名ルーティングルールを持つセレクタを追加できるようになりました。[&lt;a href=&#34;https://github.com/rancher/rancher/issues/2288&#34;&gt;#2288&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;v2ではポートからサービスへのマッピングをより柔軟に定義できるようになりました。 v1では、ポートをすべてのサービスに対応づける必要がありました。&lt;/li&gt;
&lt;li&gt;好きなLBエンジン(nginxなど)を使って独自のカスタムLBサービスを実装し、Rancherのメタデータサービスと統合して、コンテナがLBに登録することをリクエストするタイミングを判断できるようになりました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改善 &lt;a href=&#34;http://docs.rancher.com/rancher/v1.2/en/rancher-services/storage-service/&#34;&gt;Storage Support&lt;/a&gt;&lt;/strong&gt; - カスタムk8sのflexvolumeとDockerボリュームプラグインのライフサイクル、配布、および更新管理を管理する機能が追加されました。

&lt;ul&gt;
&lt;li&gt;CattleでNFSボリュームプラグインがサポートされました。 &lt;em&gt;&lt;strong&gt;1.2からRancherNFSはNFS Dockerプラグインソリューションをサポートするようになります。Convoy-NFSは1.2からオプションとして利用できなくなり、1.3以上では利用できなくなります。&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;[実験的機能]&lt;/strong&gt;&lt;/em&gt; EC2のEBSとAWS EFSがサポートされました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;認証サポートの改善 [[&lt;a href=&#34;https://github.com/rancher/rancher/issues/5265&#34;&gt;#5265&lt;/a&gt;]]&lt;/strong&gt; - 認証のフレームワークをリライトすることでRancherに新しい認証・認可サービスを加えるためのより高い柔軟性を実現しました。

&lt;ul&gt;
&lt;li&gt;Shibboleth v3がRancherにおけるSAML 2.0サポートの認証プロバイダとしてくわえられました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全体的なパフォーマンス/スケーラビリティの改善&lt;/strong&gt; - Rancherにおけるパフォーマンスとスケーラビリティを改善するために様々な機能強化が行なわれました。

&lt;ul&gt;
&lt;li&gt;インフラストラクチャビューのUIがより環境あたりより多くのホストとコンテナを表示できるよう変更されました。&lt;/li&gt;
&lt;li&gt;スケジューリングの改善と、コンテナの並列起動を実現することでコンテナのデプロイ性能を改善しました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Rancher CLI]&lt;a href=&#34;https://github.com/rancher/rancher/issues/5265&#34;&gt;#5265&lt;/a&gt;&lt;/strong&gt; - Rancherは下に示す機能をサポートしたRancher CLIが同梱されています。

&lt;ul&gt;
&lt;li&gt;管理ホストに対するネイティブなDocker CLI操作のサポート&lt;/li&gt;
&lt;li&gt;環境管理&lt;/li&gt;
&lt;li&gt;スタック管理&lt;/li&gt;
&lt;li&gt;サービス管理&lt;/li&gt;
&lt;li&gt;ホスト管理&lt;/li&gt;
&lt;li&gt;管理ホストに対するSSHアクセス&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;リソーススケジューリング&lt;/strong&gt; - CattleではCPUとメモリのリソース制約に応じてコンテナ配置のスケジューリングをサポートしていました。管理者も同様にホストあたりのCPU/メモリのリソース制限を設定することができるようになりました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://docs.rancher.com/rancher/v1.2/en/environments/#what-is-an-environment-template&#34;&gt;環境テンプレート&lt;/a&gt;&lt;/strong&gt; - Rancehrではユーザが必要なインフラストラクチャサービス(LBやネットワークなど)を記述したテンプレートを作成できるようになりました。また、このテンプレートに基づいた環境の立ち上げをサポートするようになりました。

&lt;ul&gt;
&lt;li&gt;Rancherではユーザが環境を立ち上げ、利用することができるようデフォルトのテンプレートを継続して提供しています。&lt;/li&gt;
&lt;li&gt;環境テンプレートの作成と管理をユーザが行えるようになりました。環境テンプレートでは、環境の作成に先立ってデプロイするインフラストラクチャサービスを記述することができます。&lt;/li&gt;
&lt;li&gt;ユーザはRancherによって、コミュニティに提供されたサービスおよび地震で作成したサービスの両方を活用することができるようになりました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HAサポートの改善(&lt;a href=&#34;http://docs.rancher.com/rancher/v1.2/en/installing-rancher/installing-server/#launching-rancher-server---full-activeactive-ha&#34;&gt;http://docs.rancher.com/rancher/v1.2/en/installing-rancher/installing-server/#launching-rancher-server---full-activeactive-ha&lt;/a&gt;)&lt;/strong&gt; - Rancher HAの設定と管理が劇的にシンプルになりました。 複数ノードへのRancherのデプロイに際して、RedisとZookeeperが不要になりました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;さらに&amp;hellip;&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Rancherのデプロイにおいて利用可能なDocker Registryのみを含んだホワイトリストの作成を管理者権限を用いてできるようになりました。&lt;/li&gt;
&lt;li&gt;イメージにprefixがなかった場合に利用するデフォルトのDockerレジストリをadminが指定できるようになりました。&lt;/li&gt;
&lt;li&gt;カタログのポートおよびラベルへのバインディングが可能になりました。&lt;/li&gt;
&lt;li&gt;gitブランチを取り扱うためのカタログサポートがくわえられました。&lt;/li&gt;
&lt;li&gt;Rancher AgentをGo言語でリライトしました。&lt;/li&gt;
&lt;li&gt;Docker Machineがアップデートされ、新しくアップデートされたUIとともにAzureが新しいホストドライバに加えられました。&lt;/li&gt;
&lt;li&gt;RancherOS 0.6.0以降がサポートされました。&lt;/li&gt;
&lt;li&gt;サービスが適切に起動しなかった際、ユーザにより良いロギングを提供することを目的として、サービスログのジャーナリング機能を追加しました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-2-にアップグレードするには&#34;&gt;1.2 にアップグレードするには&lt;/h2&gt;

&lt;p&gt;Rancher 1.2では、ネットワーク管理方法について大幅に変更されました。特にIPsecネットワークがCNIプラグインを利用するようにリファクタリングされ、新しいv2 LBサービスには柔軟性の高いHAProxy構成のプロバイダーをユーザーが使えるようになりました。この変更の影響で、アップグレードプロセスで&lt;strong&gt;&lt;code&gt;ネットワークのダウン時間が発生します&lt;/code&gt;&lt;/strong&gt; また、ネットワークの環境の再接続のために各環境をアップグレードする必要があります。アップグレードプロセスはそれぞれの環境によりRancherアップデート方法が分かれているので、以下の手順に従って現在のバージョンを適切な方法で1.2にアップグレードしてください:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rancher サーバーアップグレード&lt;/strong&gt;
必ずデータベースをバックアップしてください。Rancher 1.2.0へバージョンアップ後には、以前のバージョンに戻すことはできません。戻したい場合は、以前動いていたバージョン時点でのデータベースのスナップショットを利用するしかありません。データベースのバックアップを取ってから、&lt;a href=&#34;http://docs.rancher.com/rancher/v1.2/en/upgrading/&#34;&gt;per the docs&lt;/a&gt;に従ってアップグレードを開始してください。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; AWS セキュリティグループを利用している場合、必ずICMPをセキュリティグループで有効にしてください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;環境のアップグレード&lt;/strong&gt;&lt;br /&gt;
Rancherサーバーをアップグレードした後は、1.2環境に正常にアップグレードするまで、環境にアクセスできなくなります。1.2でネットワークとLBの変更される為、新しいネットワークコンポーネントに更新されて移行されるまでアップグレード処理中にネットワークが切断されます。アップデートが必要な環境ごとに&lt;strong&gt;Upgrade Now&lt;/strong&gt;*画面を表示して、いつ更新するかを決めることができる便利な機能を提供しました。更新を実行するまで、コンテナは機能し続けますが、管理機能は許可されません。この時、コンテナの再作成（ヘルスチェック）によってこれらのコンテナが動かなくなる可能性があります。HA、DNSプログラミング、ヘルスチェックなど、Rancherの関与が必要な機能は、完了するまで正常に動作しない可能性があるため、環境をなるべく早くアップグレードすることを強くお勧めします。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;今すぐアップグレード&amp;rdquo;をクリックすると、Rancherは環境のアップグレードを開始します。ご使用の環境の規模によっては最大10〜20分かかる場合がありますので、しばらくお待ちください。&lt;strong&gt;Stacks&lt;/strong&gt; - &amp;gt; &lt;strong&gt;Infrastructure&lt;/strong&gt;の下にあるすべてのスタックが&lt;strong&gt;active&lt;/strong&gt;状態になっていたら、環境は正常に更新されています。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Kubernetes環境の方は、すべてのインフラストラクチャサービスが「アクティブ」状態になったら、既存のk8s v1.2.6スタックをv1.4.6にアップグレードしなければなりません。注意:k8sをアップグレードする際、既存のポッドを削除して再作成する可能性のある既知の問題があることに注意してください。ポッドがレプリケーションコントローラの一部でない場合は、再作成されません。 それに考慮して計画してください。このケースでもアップグレードプロセスは環境に応じて5〜10分以上かかる場合があり、スタックがアクティブな状態になると完了します。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;既知のアップグレードの制限事項&#34;&gt;既知のアップグレードの制限事項&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Swarm環境のアップグレードはサポートされていません。DockerがDockerエンジンに移行することに関するDocker Swarmからの変更により、Swarmのサポートが最新のDocker 1.12 Swarmからになった為です。&lt;/li&gt;
&lt;li&gt;環境テンプレートオプションを表示するマイグレーション用フォルダのカタログエントリがいくつかあります。 これらのカタログ・エントリーは、古いエントリーへのロールバックをサポートしていません。 例えば、Kubernetesにすべての外部DNSエントリが含まれこれ以外にも同様のものがあります。&lt;/li&gt;
&lt;li&gt;v1ロードバランサからv2ロードバランサへのアップグレード中に、セレクタを使用するルールはアップグレードされません。 これらのルールは、環境のアップグレード後にロードバランサーに再度追加する必要があります。&lt;/li&gt;
&lt;li&gt;1.2からは、Rancherはcadvisorからの統計情報を取得せず、Dockerの統計情報から取得します。 これにより、Prometheusのようなcadvisorに依存する既存のカタログは、Dockerの統計情報から取得するように修正されるまで機能しなくなることに注意してください。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>クイックスタートガイド</title>
      <link>https://rancherjp.github.io/docs/qsg/</link>
      <pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://rancherjp.github.io/docs/qsg/</guid>
      <description>

&lt;h2 id=&#34;クイック-スタート-ガイド&#34;&gt;クイック スタート ガイド&lt;/h2&gt;

&lt;p&gt;このガイドでは、1台のLinuxサーバーに全てインストールして動く、最も簡単なRancherをインストールしてみます。&lt;/p&gt;

&lt;h3 id=&#34;linuxホストを準備する&#34;&gt;Linuxホストを準備する&lt;/h3&gt;

&lt;p&gt;3.10 + のカーネルが最低限入っている64 ビット Ubuntu 16.04 と Linux ホストを準備します。 ノートパソコンでも、仮想環境でも、物理サーバーも利用可能です。 Linux ホストには少なくとも &lt;strong&gt;1GB&lt;/strong&gt; のメモリがあることを確認してください。 &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; をホストにインストールします。&lt;/p&gt;

&lt;p&gt;サーバーにDockerをインストールするには、 &lt;a href=&#34;https://docs.docker.com/engine/installation/linux/ubuntulinux/&#34;&gt;Docker&lt;/a&gt; 社の手引きを参照してください。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; 現在、Windows と Mac のDockerはサポートされていません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;rancher-サーバータグ&#34;&gt;Rancher サーバータグ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rancher/server:latest&lt;/code&gt; タグはRancherの安定版ビルドにつけられます。Rancher社が推奨している本番環境展開用です。 各マイナーリリースタグに対して、それぞれのバージョンでのドキュメントを提供します。&lt;/p&gt;

&lt;p&gt;もし、CI自動化フレームワークで検証済の最新開発版のビルドに興味があれば、最新の開発版のリリースタグが付いた&lt;a href=&#34;https://github.com/rancher/rancher/releases&#34;&gt;リリースページ&lt;/a&gt; を確認してください。 このリリースは本番環境デプロイ用ではありません。 開発ビルドには、全て開発リリースであることを示す&lt;code&gt;*-pre{n}&lt;/code&gt; という接尾辞が付加されます。 &lt;code&gt;rc{n}&lt;/code&gt; サフィックスの付いているリリースはいずれも使用しないでください。 &lt;code&gt;rc&lt;/code&gt; ビルドは、Rancherチームが開発版ビルドをテストするためのものです。&lt;/p&gt;

&lt;h3 id=&#34;rancherサーバーを動かす&#34;&gt;Rancherサーバーを動かす&lt;/h3&gt;

&lt;p&gt;Rancherサーバーを起動するコマンドは1つだけです。コンテナを起動したら、コンテナのログを調べて、サーバが起動して動いているかを確認します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ sudo docker run -d --restart=unless-stopped -p 8080:8080 rancher/server
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# Rancherのログを表示&lt;/span&gt;
$ sudo docker logs -f &amp;lt;CONTAINER_ID&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Rancherサーバーの起動に数分おまちください。 &lt;code&gt;.... Startup Succeeded, Listening on port....&lt;/code&gt; が表示されたら、RancherのUIは起動して稼働中です。 ログのこの行が表示されたら、ほとんど設定は終了です。 この出力の後に追加のログが出力される可能性があるので、これが初期起動時のログの最後の行であるとは限りません。&lt;/p&gt;

&lt;p&gt;UIは &lt;code&gt;8080&lt;/code&gt; ポートで動いているので、表示するには &lt;code&gt;http://&amp;lt;SERVER_IP&amp;gt;:8080&lt;/code&gt; をブラウザーで開いてください。 Rancherサーバーとブラウザーが同じホストで動いている場合は、&lt;code&gt;http://192.168.1.100:8080&lt;/code&gt; のように実IPを使ってください。&lt;code&gt;http://localhost:8080&lt;/code&gt; や &lt;code&gt;http://127.0.0.1:8080&lt;/code&gt; としないようにしてください。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; Rancherサーバーにはアクセス制限が設定されておらず、このIPアドレスにアクセスできる誰でもこのUIとAPIを利用できます。 &lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/configuration/access-control/&#34;&gt;アクセス制限&lt;/a&gt;を設定することをお勧めします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;ホストを追加&#34;&gt;ホストを追加&lt;/h3&gt;

&lt;p&gt;わかりやすくするためにRancherサーバーを実行しているサーバーをRancherのホストとして追加します。実際の運用では、専用のRancherを実行するホストを動かすことをお勧めします。&lt;/p&gt;

&lt;p&gt;ホストを追加するには、UIから &lt;strong&gt;Infrastructure&lt;/strong&gt; をクリックして、&lt;strong&gt;Hosts&lt;/strong&gt; ページを表示してください。 &lt;strong&gt;Add Host&lt;/strong&gt; をクリックします。 Rancherで利用するURLを選択するように指示されます。 このURLは、Rancherサーバーが動いているURLになり、これから追加するRancherホストから接続可能なものでなくてはなりません。 この設定は、RancherサーバーがファイヤウォールでNATされたり、ロードバランサーを介してインターネットに公開される場合に便利です。 ホストに&lt;code&gt;192.168.*.*&lt;/code&gt;のようなプライベートやローカルIPなアドレスがついていた場合、Rancherサーバーにホストが本当にURLにアクセスできるかどうかを尋ねる警告が表示されます。&lt;/p&gt;

&lt;p&gt;今のところ、これらの警告は無視してRancherサーバーホスト自体を追加することができます。 &lt;strong&gt;Save&lt;/strong&gt; をクリックします。 デフォルトでは、Rackherエージェントコンテナを起動するDockerコマンドを提供する &lt;strong&gt;Custom&lt;/strong&gt; オプションが選択されます。 RancherがDocker Machineを使用してホストを起動するクラウドプロバイダ向けのオプションもあります。&lt;/p&gt;

&lt;p&gt;UIでホスト上でオープンにするポートの指示とオプションの設定項目が表示されます。Rancherサーバーも稼動しているホストを追加するので、このホストで使用するパブリックIPを追加する必要があります。 このオプションで入力されたIPにより、カスタムコマンドでの環境変数が自動的に変更されます。&lt;/p&gt;

&lt;p&gt;Rancherサーバーを実行しているホストでこのコマンドを実行します。&lt;/p&gt;

&lt;p&gt;Rancher UIで &lt;strong&gt;Close&lt;/strong&gt; をクリックすると、&lt;strong&gt;Infrastructure&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Hosts&lt;/strong&gt; 表示に戻ります。 数分後にホストが自動的に表示されます。&lt;/p&gt;

&lt;h3 id=&#34;インフラストラクチャーサービス&#34;&gt;インフラストラクチャーサービス&lt;/h3&gt;

&lt;p&gt;最初にRancherにログインすると自動的に &lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/environments/&#34;&gt;environment&lt;/a&gt;になります。この&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/rancher-services/&#34;&gt;infrastructure services&lt;/a&gt;を開始するためにデフォルトのcattle &lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/environments/#what-is-an-environment-template&#34;&gt;environment template&lt;/a&gt;が選択されます。この[infrastructure services]は、Rancherの持っている&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/rancher-services/dns-service/&#34;&gt;dns&lt;/a&gt;や&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/rancher-services/metadata-service&#34;&gt;metadata&lt;/a&gt;、&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/rancher-services/networking&#34;&gt;networking&lt;/a&gt;そして&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/cattle/health-checks/&#34;&gt;health checks&lt;/a&gt;のような機能の利点を活用するため有利なものです。これらのインフラストラクチャスタックは、&lt;strong&gt;Stacks&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Infrastructure&lt;/strong&gt; にあります。これらのスタックは、ホストがRancherに完全に追加されるまで、&lt;code&gt;不健全な&lt;/code&gt; 状態です。ホストを追加した後は、サービスを追加する前にすべてのインフラストラクチャスタックが &lt;code&gt;active&lt;/code&gt; になるまで待つことをお勧めします。&lt;/p&gt;

&lt;p&gt;ホストでは、&lt;strong&gt;Show System&lt;/strong&gt; チェックボックスをクリックしない限り、インフラストラクチャサービスのコンテナは非表示になります。&lt;/p&gt;

&lt;h3 id=&#34;uiを使用してコンテナを作成する&#34;&gt;UIを使用してコンテナを作成する&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Stacks&lt;/strong&gt; 画面に移動して、まだサービスがない場合は、Welcome画面の &lt;strong&gt;Define a service&lt;/strong&gt; ボタンをクリックします。 Rancherに既にサービスが存在する場合は、既存のスタックの &lt;strong&gt;Add Service&lt;/strong&gt; をクリックするか、新しいスタックを作成してサービスを追加できます。 新しいスタックを作成する必要がある場合は、 &lt;strong&gt;Add Stack&lt;/strong&gt; をクリックし、名前と説明を入力して &lt;strong&gt;Create&lt;/strong&gt; をクリックします。 次に新規スタックで &lt;strong&gt;Add Service&lt;/strong&gt; をクリックします。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;first-container&amp;rdquo;のような名前でサービスを追加します。 デフォルトの設定を使用して &lt;strong&gt;Create&lt;/strong&gt; をクリックするだけです。 Rancherは、ホスト上でコンテナの起動を開始します。ホストのIPアドレスにかかわらず、Rancherがipsecインフラストラクチャサービスで管理オーバーレイネットワークを作成したため、最初のコンテナのIPアドレスは &lt;code&gt;10.42 *.*&lt;/code&gt; の範囲になります。管理オーバーレイネットワークで、コンテナが異なるホスト間で相互に通信できるように管理しています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;first-container&lt;/em&gt;&lt;/strong&gt; のドロップダウンをクリックすると、コンテナの停止、ログの表示、コンテナコンソールへのアクセスなどの管理アクションを実行できます。&lt;/p&gt;

&lt;h3 id=&#34;dockerのcliを直接使ってコンテナを作成する&#34;&gt;DockerのCLIを直接使ってコンテナを作成する&lt;/h3&gt;

&lt;p&gt;Rancherは、コンテナがUIの外で作成されていてもホスト上のコンテナを表示できます。ホストのシェル端末からコンテナを作成してみます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ docker run -d -it --name=second-container ubuntu:14.04.2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;UI上では、 &lt;strong&gt;&lt;em&gt;second-container&lt;/em&gt;&lt;/strong&gt; がホスト上にポップアップ表示されます。&lt;/p&gt;

&lt;p&gt;RancherはDockerデーモンで発生するイベントに反応し、実際の動作状況とRancherでの状況を調整します。 &lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/native-docker/&#34;&gt;native docker CLI&lt;/a&gt;を使用してRancherを利用する方法の詳細を読むことができます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;second-container&lt;/em&gt;&lt;/strong&gt; のIPアドレスを見ると、&lt;code&gt;10.42.*.*&lt;/code&gt; の範囲には&lt;strong&gt;ない&lt;/strong&gt;ことがわかります。 これは、Dockerデーモンによって割り当てられた通常のIPアドレスです。 CLIを使用してDockerコンテナを作成するとこのようになります。&lt;/p&gt;

&lt;p&gt;CLIを使用してRancherのオバーレイネットワークからIPアドレスのDockerコンテナを作成するにはどうすればよいでしょうか？ しなければならないこと、コマンドにラベル(i.e. &lt;code&gt;io.rancher.container.network=true&lt;/code&gt;)を追加するだけで、Rancherは、このコンテナが&lt;code&gt;管理&lt;/code&gt;ネットワークに属しなければならないと認識します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ docker run -d -it --label io.rancher.container.network=true ubuntu:14.04.2
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;マルチコンテナアプリケーションの作成&#34;&gt;マルチコンテナアプリケーションの作成&lt;/h3&gt;

&lt;p&gt;個別のコンテナを作成する方法と、ホスト間ネットワークでそれらがどのように接続されるかを説明しました。 しかし、実際のアプリケーションのほとんどは複数のサービスで構成されており、各サービスは複数のコンテナで構成されています。 たとえば、&lt;a href=&#34;http://sdelements.github.io/lets-chat/&#34;&gt;LetsChat&lt;/a&gt;アプリケーションは、次のようなサービスで構成されます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ロードバランサー ロードバランサーはインターネットからのリクエストを&amp;rdquo; LetsChat&amp;rdquo; アプリケーションに中継します。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ウェブ&lt;/em&gt; サービス &amp;ldquo;LetsChat&amp;rdquo; コンテナ2つで構成されます。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;データーベース&lt;/em&gt; サービス &amp;ldquo;Mongo&amp;rdquo; コンテナ1つで構成されます。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ロードバランサーは&lt;em&gt;ウェブ&lt;/em&gt; サービス(例 LetsChat) に接続し、&lt;em&gt;ウェブ&lt;/em&gt; サービスは&lt;em&gt;データーベース&lt;/em&gt; サービス(例 Mongo)にリンクします。&lt;/p&gt;

&lt;p&gt;このセクションでは、Rancherに &lt;a href=&#34;http://sdelements.github.io/lets-chat/&#34;&gt;LetsChat&lt;/a&gt; アプリケーションのコンテナを作成して展開する方法を説明します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stacks&lt;/strong&gt; 画面に移動します。まだサービスがない場合は、Welcome画面の &lt;strong&gt;Define a Service&lt;/strong&gt; ボタンをクリックします。 Rancherに既にサービスが存在する場合は、既存のスタックの &lt;strong&gt;Add Service&lt;/strong&gt; をクリックするか、新しいスタックを作成してサービスを追加できます。 新しいスタックを作成する必要がある場合は、 &lt;strong&gt;Add Stack&lt;/strong&gt; をクリックし、名前と説明を入力して &lt;strong&gt;Create&lt;/strong&gt; をクリックします。 次に新規スタックで &lt;strong&gt;Add Service&lt;/strong&gt; をクリックします。&lt;/p&gt;

&lt;p&gt;まず、&lt;code&gt;mongo&lt;/code&gt; イメージを使い &lt;em&gt;データベース&lt;/em&gt; というサービスを作成します。 &lt;strong&gt;Create&lt;/strong&gt; をクリックします。&lt;em&gt;データーベース&lt;/em&gt; サービスが含まれるスタックページがすぐに表示されます。&lt;/p&gt;

&lt;p&gt;次に、もう一度 &lt;strong&gt;Add Service&lt;/strong&gt; をクリックして、別のサービスを追加します。 LetsChatサービスと&lt;em&gt;データーベース&lt;/em&gt; サービスとをリンクをさせます。 &lt;code&gt;sdelements/lets-chat&lt;/code&gt;イメージを使用して、&lt;code&gt;web&lt;/code&gt; 名前を付けます。UI上でスライダを動かして、サービスのスケールをコンテナ2つにします。 &lt;strong&gt;Service Links&lt;/strong&gt; に&lt;code&gt;mongo&lt;/code&gt; という名前の &lt;em&gt;データベース&lt;/em&gt; サービスを追加します。 Dockerの場合と同様に、Rancherは、&lt;code&gt;mongo&lt;/code&gt; の名前を選択すると、リンクされたデータベースとして &lt;code&gt;letschat&lt;/code&gt; イメージに必要な環境変数をリンクします。 &lt;strong&gt;Create&lt;/strong&gt; をクリックします。&lt;/p&gt;

&lt;p&gt;最後にロードバランサーを作成します。 &lt;strong&gt;Add Service&lt;/strong&gt; ボタンの横にあるドロップダウンメニューアイコンをクリックします。 &lt;strong&gt;Add Load Balancer&lt;/strong&gt; を選択します。 &lt;code&gt;letschatapplb&lt;/code&gt; のような名前を入力し、接続先アプリケーションにアクセスするために使用するホスト上のソースポート(例 &lt;code&gt;80&lt;/code&gt;)とターゲットサービス(例 &lt;em&gt;web&lt;/em&gt;)とターゲットポート(例 &lt;code&gt;8080&lt;/code&gt;) を選択します。 この場合、&lt;em&gt;ウェブ&lt;/em&gt; サービスで &lt;code&gt;8080&lt;/code&gt;番ポートを使用します。&lt;/p&gt;

&lt;p&gt;LetsChatアプリケーションが完成しました！ &lt;strong&gt;Stacks&lt;/strong&gt;画面で、ロードバランサが公開しているポートをリンクとして見つけることができます。 そのリンクをクリックすると、新しいブラウザが開き、LetsChatアプリケーションが表示されます。&lt;/p&gt;

&lt;h3 id=&#34;rancher-cli-を使用して複数コンテナアプリケーションを作成する&#34;&gt;Rancher CLI を使用して複数コンテナアプリケーションを作成する&lt;/h3&gt;

&lt;p&gt;このセクションでは、&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/cli/&#34;&gt;Rancher CLI&lt;/a&gt; というコマンドラインツールを使用して前のセクションで作成したと同じ&lt;a href=&#34;http://sdelements.github.io/lets-chat/&#34;&gt;LetsChat&lt;/a&gt;アプリケーションを作成して展開する方法を説明します。&lt;/p&gt;

&lt;p&gt;Rancherサービスが起動したときに、Rancher CLIツールは一般的なDocker Composeツールと同じように機能します。 これは、同じように &lt;code&gt;docker-compose.yml&lt;/code&gt; ファイルを読み込んでRancherにアプリケーションをデプロイします。 &lt;code&gt;rancher-compose.yml&lt;/code&gt; ファイルを利用すると &lt;code&gt;docker-compose.yml&lt;/code&gt; ファイルを拡張して上書きする追加の属性を指定することができます。&lt;/p&gt;

&lt;p&gt;前のセクションでは、ロードバランサを備えたLetsChatアプリケーションを作成しました。 Rancherで作成していた場合、スタックのドロップダウンメニューから &lt;strong&gt;Export Config&lt;/strong&gt; を選択して、UIから直接ファイルをダウンロードできます。 &lt;code&gt;docker-compose.yml&lt;/code&gt; と &lt;code&gt;rancher-compose.yml&lt;/code&gt; ファイルは次のようになります。&lt;/p&gt;

&lt;h4 id=&#34;example-docker-compose-yml&#34;&gt;Example docker-compose.yml&lt;/h4&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;version: &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  letschatapplb:
    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#If you only have 1 host and also created the host in the UI,&lt;/span&gt;
    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# you may have to change the port exposed on the host.&lt;/span&gt;
    ports:
    - 80:80/tcp
    labels:
      io.rancher.container.create_agent: &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;
      io.rancher.container.agent.role: environmentAdmin
    image: rancher/lb-service-haproxy:v0.4.2
  web:
    labels:
      io.rancher.container.pull_image: always
    tty: true
    image: sdelements/lets-chat
    links:
    - database:mongo
    stdin_open: true
  database:
    labels:
      io.rancher.container.pull_image: always
    tty: true
    image: mongo
    stdin_open: true
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;example-rancher-compose-yml&#34;&gt;Example rancher-compose.yml&lt;/h4&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;vversion: &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  letschatapplb:
    scale: 1
    lb_config:
      certs: []
      port_rules:
      - hostname: &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        path: &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        priority: 1
        protocol: http
        service: quickstartguide/web
        source_port: 80
        target_port: 8080
    health_check:
      port: 42
      interval: 2000
      unhealthy_threshold: 3
      healthy_threshold: 2
      response_timeout: 2000
  web:
    scale: 2
  database:
    scale: 1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
フッター右側にある &lt;strong&gt;Download CLI&lt;/strong&gt; をクリックして、RancherのUIからRancher CLIバイナリをダウンロードします。 Windows、Mac、Linux用のバイナリを提供しています。&lt;/p&gt;

&lt;p&gt;Rancher CLIを使用してRancherでサービスを開始するには、いくつか環境変数を設定する必要があります。 Rancher UIで&lt;a href=&#34;{{site.baseurl}}/rancher/{{page.version}}/{{page.lang}}/api/api-keys/&#34;&gt;account API Key&lt;/a&gt;を作成します。 &lt;strong&gt;API&lt;/strong&gt; をクリックし、&lt;strong&gt;Add Account API Key&lt;/strong&gt; をクリックします。 ユーザー名 (アクセスキー) とパスワード (秘密キー) を保存します。 Rancher CLIに必要な次の環境変数を設定します: &lt;code&gt;RANCHER_URL&lt;/code&gt;、&lt;code&gt;RANCHER_ACCESS_KEY&lt;/code&gt; と &lt;code&gt;RANCHER_SECRET_KEY&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# Set the url that Rancher is on&lt;/span&gt;
$ export RANCHER_URL=http://server_ip:8080/
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# Set the access key, i.e. username&lt;/span&gt;
$ export RANCHER_ACCESS_KEY=&amp;lt;username_of_key&amp;gt;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# Set the secret key, i.e. password&lt;/span&gt;
$ export RANCHER_SECRET_KEY=&amp;lt;password_of_key&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
&lt;code&gt;docker-compose.yml&lt;/code&gt; と &lt;code&gt;rancher-compose.yml&lt;/code&gt; を保存したディレクトリに移動し、コマンドを実行します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ rancher -p NewLetsChatApp up -d
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Rancherで &lt;strong&gt;NewLetsChatApp&lt;/strong&gt; という新しいスタックが作成され、サービスがすべて起動します&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rancher Blog</title>
      <link>https://rancherjp.github.io/blog/2016/10/27/01/</link>
      <pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://rancherjp.github.io/blog/2016/10/27/01/</guid>
      <description>&lt;p&gt;準備中 &amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rancher もくもく勉強会 #1</title>
      <link>https://rancherjp.github.io/content/2016/10/27/rancher-workshop-01/</link>
      <pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://rancherjp.github.io/content/2016/10/27/rancher-workshop-01/</guid>
      <description>&lt;p&gt;Rancher もくもく勉強会 #1 - connpass
&lt;a href=&#34;http://connpass.com/event/41997/&#34;&gt;http://connpass.com/event/41997/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;挨拶&lt;/p&gt;

&lt;p&gt;自己紹介&lt;/p&gt;

&lt;p&gt;自己紹介のつもりが、名刺交換会から開始になってしまいました。&lt;/p&gt;

&lt;p&gt;・初心者向けチーム
・もくもくチーム
に分かれて開始しました。
&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/27/DSC_0070.JPG&#34; alt=&#34;&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;新藤さんが初心者向けチームにRancherの概要説明中&lt;/p&gt;

&lt;p&gt;chiba go さんがRancherとDockerの解説
・Rancherの日本語訳は、Chibaさんがされた
・Rancherのインストールは、コマンド一発 以上　とても簡単
・クラウドのサポートも楽ちん。
・AWSにあるRancherOSのイメージを使えば、ホストの追加もOK。&lt;/p&gt;

&lt;p&gt;＃Chiba goさんの深い話がつづく
&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/27/DSC_0071.JPG&#34; alt=&#34;&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;ネットワークとかスケジューリングとかは、K8sとかが担当するべき範囲
　docker-compose.ymlは、Dockerのコンテナの関係性を示す。
　rancher-compose.ymlは、Rancherのスケールするとかの設定を示す。&lt;/p&gt;

&lt;p&gt;コンテナイメージは、どこからか取ってくるしかない。
CIツールは、別途必要になる。&lt;/p&gt;

&lt;p&gt;yo コマンドでRancherのCatalogテンプレートを作ってくれる。&lt;/p&gt;

&lt;p&gt;Kubernetesと、Cattleでのインフラの大きいので、カタログでも動く、動かないというのが実はある。
越えられない壁があって。。&lt;/p&gt;

&lt;p&gt;Rancherのいいところは、Dockerのコマンドラインではちょっとお。と言う人向けにDockerの民主化の為に必要&lt;/p&gt;

&lt;p&gt;@cyberblack28 さんのDocker解説
&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/27/DSC_0072.JPG&#34; alt=&#34;&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;Dockerの手順は、自分の手で打つと勉強になるよ。
VMで動かす場合は、ネットワークが注意&lt;/p&gt;

&lt;p&gt;@Cyberduck28 さんが解説してくれたDockerの資料は、以下です。
「Docker～WordPress環境を作ってみる ハンズオン編」
&lt;a href=&#34;http://www.slideshare.net/cyberblackvoom/linaction-theme-docker&#34;&gt;http://www.slideshare.net/cyberblackvoom/linaction-theme-docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dockerのいいところ
1. オーバーヘッドが少ない。
2. OSの部分まで入っているのでデプロイが簡単。
3. インフラ環境によらずに管理が楽になりました。&lt;/p&gt;

&lt;p&gt;Docker勉強会になりつつありｗ。&lt;/p&gt;

&lt;p&gt;Dockerのダメなところ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ステートレスな形で構成しないとダメです。&lt;/li&gt;
&lt;li&gt;トラブルをちゃんと解析しない。&lt;/li&gt;
&lt;li&gt;それなりにマッチする環境や方法を踏まえないとダメです。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dockerをエンタープライズに適用することの難しさ。
&amp;mdash;&amp;gt;発想が変わらないとなかなか難しい。&lt;/p&gt;

&lt;p&gt;Googleとかとかと日本の環境との違いが大きすぎる。&lt;/p&gt;

&lt;p&gt;業務系の開発からでは、コンテナの発想が大きくちがうのでワケワカ&lt;/p&gt;

&lt;p&gt;IoT などの場合では、サーバーが何万台とある全てのIoTデバイスをコントロールするのは現実的ではないのではと思う。途中IoTのデバイスを中継する中継基地サーバーが必要なのではないだろうか。コンテナーはそういう用途に非常に向いていると思う。&lt;/p&gt;

&lt;p&gt;それを受けて、Chiba go さんのIoT 関連話。Resin.io でのドローン内でコンテナが動いている話を紹介。参加者一同驚嘆&lt;/p&gt;

&lt;p&gt;Home | Resin.io
&lt;a href=&#34;https://resin.io/&#34;&gt;https://resin.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rancherでコンテナが100台とかになったら画面がどうなるか気になる。
「そのうちグルーピングできるようになるんじゃないだろうか？」
「検索インターフェースも必要だよね」
「画面は、レスポンシブ対応もありますよ。」&lt;/p&gt;

&lt;p&gt;Rancherでのモニタリングとか、シェルとかもGUIから接続できますよ。&lt;/p&gt;

&lt;p&gt;新藤さんが、今日の本題 3行でDocker+Rancherを解説&lt;/p&gt;

&lt;p&gt;@ynott が DockerとRancherの関係を図で解説
&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/27/DSC_0075.JPG&#34; alt=&#34;&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;「次回は、12月ぐらいに Meetup しましょう。Google のIan Lewis と会話中」&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rancher Meetup Tokyo #1</title>
      <link>https://rancherjp.github.io/content/2016/10/07/rancher-meetup-01/</link>
      <pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://rancherjp.github.io/content/2016/10/07/rancher-meetup-01/</guid>
      <description>

&lt;h2 id=&#34;今熱い盛り上がりを見せているrancherの勉強会-rancher-meetup-tokyo-1-参加レポート&#34;&gt;今熱い盛り上がりを見せているRANCHERの勉強会「Rancher Meetup Tokyo #1」参加レポート！&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://snickerjp.blogspot.jp/2016/10/rancher-meetup-tokyo-vol1.html&#34;&gt;http://snickerjp.blogspot.jp/2016/10/rancher-meetup-tokyo-vol1.html&lt;/a&gt;&lt;/p&gt;

&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/07/20161007_184910.jpg&#34; alt=&#34;&#34;&gt;&lt;/img&gt;

&lt;p&gt;コンテナオーケストレーション管理ツールとして、以前から注目が高かった「RANCHER」&lt;br /&gt;
初のMeetupが開催されたので、かんたんなレポートです！&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;もくじ&#34;&gt;もくじ&lt;/h3&gt;

&lt;p&gt;-「Rancher Overview (DEMO)」（Bill Maxwell 氏）(#「Rancher Overview (DEMO)」（Bill Maxwell 氏）)&lt;br /&gt;
-「Rancher CLI + Jenkins で実現するCI/CD」(#「Rancher CLI + Jenkins で実現するCI/CD」)&lt;br /&gt;
- RANCHERのCEO (Sheng Liang 氏)のメッセージビデオ(#RANCHERのCEO (Sheng Liang 氏)のメッセージビデオ)&lt;br /&gt;
- LT(#LT)&lt;br /&gt;
- 参加者プレゼントで「RANCHER」のTシャツ(#参加者プレゼントで「RANCHER」のTシャツ)&lt;br /&gt;
- 感想(#感想)&lt;br /&gt;
- 参考サイト(#参考サイト)&lt;/p&gt;

&lt;h2 id=&#34;rancher-overview-demo-bill-maxwell-氏&#34;&gt;「Rancher Overview (DEMO)」（Bill Maxwell 氏）&lt;/h2&gt;

&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/07/20161007_185051.jpg&#34; alt=&#34;&#34;&gt;&lt;/img&gt;

&lt;p&gt;全編英語で、スライド見ているしかなかった発表&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/07/DSC02584.JPG&#34; alt=&#34;&#34;&gt;&lt;/img&gt;
&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/07/DSC02586.JPG&#34; alt=&#34;&#34;&gt;&lt;/img&gt;
&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/07/DSC02587.JPG&#34; alt=&#34;&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;h2 id=&#34;rancher-cli-jenkins-で実現するci-cd&#34;&gt;「Rancher CLI + Jenkins で実現するCI/CD」&lt;/h2&gt;

&lt;p&gt;最近出てきたという「Rancher CLI」の紹介とJenkinsを絡めた
「継続的インテグレーションとデリバリ」  かなりかっこよかったんですが、そんなことできるかな？？&lt;/p&gt;

&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/07/20161007_194116.jpg&#34; alt=&#34;&#34;&gt;&lt;/img&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rancher/cli&#34;&gt;https://github.com/rancher/cli&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;rancherのceo-sheng-liang-氏-のメッセージビデオ&#34;&gt;RANCHERのCEO (Sheng Liang 氏)のメッセージビデオ&lt;/h2&gt;

&lt;p&gt;ちょっと日本語、その後英語なメッセージビデオ&lt;/p&gt;

&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/07/20161007_200700_001.jpg&#34; alt=&#34;&#34;&gt;&lt;/img&gt;

&lt;h2 id=&#34;lt&#34;&gt;LT&lt;/h2&gt;

&lt;p&gt;LTの内容も濃くて、すごかった！&lt;/p&gt;

&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/07/20161007_210045.jpg&#34; alt=&#34;&#34;&gt;&lt;/img&gt;

&lt;p&gt;(&lt;a href=&#34;http://qiita.com/cyberblack28/items/d1c6259c137c7c71703b&#34;&gt;http://qiita.com/cyberblack28/items/d1c6259c137c7c71703b&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;参加者プレゼントで-rancher-のtシャツ&#34;&gt;参加者プレゼントで「RANCHER」のTシャツ&lt;/h2&gt;

&lt;p&gt;来場者全員にTシャツがプレゼントされました！豪華！&lt;/p&gt;

&lt;img src=&#34;https://rancherjp.github.io/images/2016/10/07/20161007_184910.jpg&#34; alt=&#34;&#34;&gt;&lt;/img&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;RANCHERって結構サクッと動いちゃって、なんかうまいことやってくれるUIツールだなー！&lt;br /&gt;
と、思っていたけど。&lt;br /&gt;
エンタープライズ向けに設計されているし、なんか色々使ってうまく出来ないかな？？&lt;/p&gt;

&lt;p&gt;dockerのSwarm modeへの対応待たれますねー！&lt;/p&gt;

&lt;h2 id=&#34;参考サイト&#34;&gt;参考サイト&lt;/h2&gt;

&lt;p&gt;(&lt;a href=&#34;http://connpass.com/event/40326/&#34;&gt;http://connpass.com/event/40326/&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>