<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Rancher JP</title>
    <link>http://www.rancher.jp/categories/blog/index.xml</link>
    <description>Recent content in Blog on Rancher JP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>© 2016 Rancher JP</copyright>
    <atom:link href="http://www.rancher.jp/categories/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[翻訳]見逃されているかもしれないコンテナのレジストリ</title>
      <link>http://www.rancher.jp/blog/2016/12/22/container-registries-might-missed-ja/</link>
      <pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.rancher.jp/blog/2016/12/22/container-registries-might-missed-ja/</guid>
      <description>

&lt;p&gt;以下は、
Rancher Labs | Container registries you may have missed | Rancher Labs&lt;br /&gt;
&lt;a href=&#34;http://rancher.com/container-registries-might-missed/&#34;&gt;http://rancher.com/container-registries-might-missed/&lt;/a&gt;
からの翻訳です。&lt;/p&gt;

&lt;p&gt;Container Registries You Might Have Missed
見逃されているかもしれないコンテナのレジストリ&lt;/p&gt;

&lt;p&gt;2016年11月10日 &lt;a href=&#34;http://rancher.com/author/vince-power/&#34;&gt;Vince Power&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;レジストリは、コンテナを扱う上で重要なコンポーネントの一つで、特にDockerでは多くの人から注目を浴びています。レジストリは、コンテナエンジンホストにダウンロード実行されるイメージを保管します。コンテナはその特定のイメージの単なるインスタンスです。イメージは、Microsoft WindowsのMSIやRed Hat Enterprise LinuxのRPMなど、すぐに使えるパッケージのようなものと考えることができます。レジストリは、どういう風に動作するか詳細には述べませんが、詳細を知りたい場合はこの記事&lt;a href=&#34;http://rancher.com/comparing-four-hosted-docker-registries/&#34;&gt;素晴らしい記事&lt;/a&gt;を読むと良いでしょう。&lt;/p&gt;

&lt;p&gt;この記事で説明したいことは私の注目しているレジストリのいくつかを取り上げてみたいと思います。Dockerを使う人にとっては有名なレジストリは既に知られていると思いますが、どこにイメージを置くかを決めるのに考慮する価値のある小規模なレジストリもあります。&lt;/p&gt;

&lt;p&gt;あまり知られていないこれらのコンテナレジストリについても検討してみましょう。&lt;/p&gt;

&lt;h1 id=&#34;よく知られているレジストリ&#34;&gt;よく知られているレジストリ&lt;/h1&gt;

&lt;p&gt;まず、大手に属するレジストリをリストアップします。その上で注目しているレジストリと比較しましょう。&lt;/p&gt;

&lt;p&gt;現在、全てのDockerユーザーから最も人気のあるレジストリは&lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;です。Docker Hubはレジストリ界の中心です。全てのDockerがデフォルトでレジストリのホスト先として登録されています。&lt;/p&gt;

&lt;p&gt;その他の世に広く知られているレジストリ:
* &lt;a href=&#34;https://docs.docker.com/docker-trusted-registry/&#34;&gt;Docker Trusted Registries&lt;/a&gt; (Dockerが配布しているオープンソース)
* &lt;a href=&#34;https://quay.io/&#34;&gt;Quay.io&lt;/a&gt; (CoreOSが提供しているレジストリ)
* &lt;a href=&#34;https://tectonic.com/quay-enterprise/&#34;&gt;Enterprise Registry&lt;/a&gt; (Quayのオンプレミス版)
* &lt;a href=&#34;https://cloud.google.com/container-registry/&#34;&gt;Google Container Registry&lt;/a&gt; (GoogleCloudプラットフォームが提供しているレジストリ)
* &lt;a href=&#34;https://www.jfrog.com/artifactory/&#34;&gt;Artifactory&lt;/a&gt; (JFrogが提供している。サービス型や、オンプレミスにできるレジストリ)&lt;/p&gt;

&lt;h1 id=&#34;あまり知られていないコンテナレジストリ&#34;&gt;あまり知られていないコンテナレジストリ&lt;/h1&gt;

&lt;p&gt;さて、注目のパートです。ここからはあまり知られていないレジストリを概説します。&lt;/p&gt;

&lt;h2 id=&#34;amazon-ec2-コンテナレジストリ-ecr&#34;&gt;Amazon EC2 コンテナレジストリ (ECR)&lt;/h2&gt;

&lt;p&gt;Amazonが&lt;a href=&#34;https://aws.amazon.com/ecr/&#34;&gt;Amazon EC2コンテナーサービス(ECS)&lt;/a&gt;と呼ばれるコンテナサービスを提供していることはすでにご存じかと思います。しかし、ECSの環境を完全に整えるレジストリについてはあまり知られていません。&lt;/p&gt;

&lt;p&gt;Amazon EC2 コンテナレジストリ(ECR)と呼ばれるこのレジストリは、Dockerのコンテナレジストリとして提供されています。ECSと統合されています。2015年12月に導入されたそれは、その他のよく知られているレジストリに比べてあまりしられていませんが、その理由を説明しましょう。&lt;/p&gt;

&lt;p&gt;ECSは、ECRとのみ互換性があるコンテナレジストリではありません。ECSは外部のレジストリとしても使うことができます。しかし、ECRの重要な点は完全にサービスとして管理されたレジストリで、展開と管理をシンプルにしています。ECRは、ECSのインフラと同じように拡張性があり、スケーラブルであるということです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ベストなユースケース:&lt;/strong&gt; AWSのヘビーユーザーでプライベートなイメージを保管する場所を検討しているのならば、ECRを使うのは非常に合理的です。大規模にレジストリを展開する場合や、将来的にレジストリが拡大することが想定される場合にも適しています。これらの場合、ECRの事実上無制限の拡張性のメリットを享受できるでしょう。&lt;/p&gt;

&lt;h2 id=&#34;flawcheck-プライベートレジストリ&#34;&gt;FlawCheck プライベートレジストリ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flawcheck.com/&#34;&gt;FlawCheckプライベートレジストリ&lt;/a&gt; (最近、セキュリティベンダーTenable社によって、FlawCheckのビジネスの残りの部分と一緒に、買収されました)セキュリティ重視のレジストリです。コンテナのイメージに対する脆弱性スキャンとマルウェア検出が組み込まれていて、サービスとして提供されています。無料のコンテナイメージに対する悪意のあるコードの埋め込みや悪意のあるイメージを入れられてしまう事を防ぐための特効薬はありませんが、FlawCheckでは、スキャン機能によりそのリスクを軽減することができます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ベストなユースケース:&lt;/strong&gt; セキュリティ意識の高い企業にとっては、これはとても良い機能だと思います。厳しく規制された業界では利用が増えるでしょう。&lt;/p&gt;

&lt;h2 id=&#34;gitlab-container-レジストリ&#34;&gt;GitLab Container レジストリ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.gitlab.com/ee/user/project/container_registry.html&#34;&gt;Gitlab コンテナレジストリ&lt;/a&gt;は、オンプレミスやレンタルサーバーでレジストリとして実行することができるコンテナイメージを取り扱うことができるGitLab社のソリューションです。GitLabに組み込まれているので、GitLabのデプロイのパイプラインに直接統合することができ、GitLabの他の部分とシームレスに統合することができます。あなたのチームでGitLabを使っておりツールを増やしたくなく、DevOpsでシームレスに統合してワークフローを利用することができることがメリットです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ベストなユースケース:&lt;/strong&gt; 開発者は、Dockerイメージとソースコードが同じところから参照できると便利だと考えるでしょう。GitLabでソースコードが見られるようにGitLabコンテナレジストリで見られると便利だと思います。一方で、その他のレジストリソフトと比べてこれと言った特徴を備えているわけではありません。&lt;/p&gt;

&lt;h2 id=&#34;portus-suse提供&#34;&gt;Portus (SUSE提供)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://port.us.org/&#34;&gt;Portus&lt;/a&gt;は、技術的にはレジストリソフトではありません。しかし、Dockerレジストリの社内展開用のUIを置き換えられるフロントエンドを備えています。Portusは、アクセス制限のオプションがあり、それによりDockerレジストリに値を追加することができるよう設計されています。
これによりチームを構成したり、レジストリのユーザーだったり、個々のチーム別のアクセス権限を設定することができます(様々な面で、この機能はUnixのようなシステムのユーザー・グループの仕組みに似ています)。Portusでは、個々のユーザーレベルまたは、チームのユーザーでのコンテナイメージの更新権限を与えることができるネームスペースをレジストリに与えることをサポートし、こまかな粒度でレポジトリに対して変更することができます。また、Portusで特徴的な点は、レジストリ設定とアクセス権限を設定するためのユーザーフレンドリーなWebインターフェイスが提供されることです。（CLI構成ツール、portusctlが同様に利用可能です。）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ベストなユースケース:&lt;/strong&gt; Dockerレジストリが好みだが、もっとセキュリティコントロールが必要とされる場合、または、よりよいアクセス制限が使いたいという理由がある場合は、Portusは強力なソリューションです。&lt;/p&gt;

&lt;h2 id=&#34;sonatype-nexus&#34;&gt;Sonatype Nexus&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.sonatype.com/products-sonatype&#34;&gt;Sonatype Nexus&lt;/a&gt;は、サービスとオンプレミスでの設置をサポートする、ソースコード管理の汎用的なレジストリです。Dockerレジストリの機能以外にも、多くの機能をサポートしていますが、Dockerレジストリも使うことができます。Dockerのレジストリよりも古い歴史があるものなのでコンテナレジストリの機能ない以前よりベテランの管理者にはおなじみかもしれません。Core Nexus プラットフォームは、オープンソースですが、商用のオプションも利用できます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ベストなユースケース:&lt;/strong&gt; 多くの企業でNexusがMavenのレポジトリとして長年利用されてきました。単純に現代的なプラットフォームのリリースに更新するだけで、組織内で新たな製品や運用スタッフの新しい技術の習得なしに独自のDockerレジストリを作成する事ができて、Dockerイメージ以外の成果物も一緒にDockerイメージを保存するサービスと同様に利用することができるようになります。&lt;/p&gt;

&lt;h2 id=&#34;vmware-harbar-レジストリ&#34;&gt;VMWare Harbar レジストリ&lt;/h2&gt;

&lt;p&gt;VMwareは、Dockerのエコシステム内ではメジャープレーヤーととらえられていないかもしれませんが、同社は確実にそのエコシステムの一員になりつつあります。&lt;a href=&#34;https://vmware.github.io/harbor/&#34;&gt;Harbarレジストリ&lt;/a&gt;は、VMwareが出したDockerイメージレジストリの答えです。このレジストリは、Dockerの基盤上にコンテナで構築されていますが、セキュリティとID管理機能が追加されています。また、単一ホストで複数のレジストリをサポートしています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ベストなユースケース:&lt;/strong&gt; Harbarが重視しているのは、セキュリティとユーザー管理で、その他のレジストリではこのような機能は提供されていない為、企業が求める価値の高いレジストリの機能となっています。企業での利用に最適です。HarbarがDockerの基盤上で動くことも、どのDocker環境にもインストールが簡単であることも注目に値します。開発者がセキュリティ上やインターネットに繋げることができないオフラインのシステムでも気軽に展開することができることも、ポイントです。&lt;/p&gt;

&lt;h1 id=&#34;結論&#34;&gt;結論&lt;/h1&gt;

&lt;p&gt;一番最初の検討課題は、サービスでつかうか、オンプレミスか、両方かという環境の展開方法の種類などを含んだどういうタイプのレジストリを利用するかということ；そして、それらのアクセス制限はどうなっているのかということ；そして、その他のセキュリティオプションがどういうものがあるかということ。&lt;/p&gt;

&lt;p&gt;もちろん、必要な要件に合った正しいレジストリを選ぶことは、どういう要件を優先するかにより決まってきます。しかし、沢山の選択肢の中から、その組織にマッチしたバランスの良いレジストリを見つけるのは難しくないでしょう。&lt;/p&gt;

&lt;p&gt;著者について：ヴィンス・パワーはMedavieブルークロスのエンタープライズアーキテクトです。彼の焦点は、コア・コンピューティング（IaaSの）、IDおよびアクセス管理、アプリケーションプラットフォーム（PaaSの）、および連続配信などの主要分野におけるクラウド導入と技術計画です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rancher Blog</title>
      <link>http://www.rancher.jp/blog/2016/10/27/01/</link>
      <pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.rancher.jp/blog/2016/10/27/01/</guid>
      <description>&lt;p&gt;準備中 &amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>